## Pipeline for generating pipeline analysis results
import pandas as pd
from snakemake.utils import min_version

### set minimum snakemake version
min_version("6.6.1")

## Stratifications
strat_tbl = pd.read_table("workflow/strats.csv", sep = ",").set_index(["ref","strat"], drop = False)
STRATS = list(set(strat_tbl["strat"]))

## Variables for data paths
mrg_dir = "resources/NIST_MedicalGene_v1.00.01"
benchdir = "workflow/data/benchmark_sets"
ensembl_dir = "workflow/data/gene_coords"

## Defining Wildcards
REFS = ["GRCh37","GRCh38"]
REGIONS = ["gene","exon","intron", "gene-plus-flank"]
BENCHTYPES = ["smallvar","SV", "union"]
BENCHSETS = ["v4", "v0.6","mrg"]
BENCHVARS = ["GRCh37_v4_smallvar", "GRCh37_v0.6_SV",
             "GRCh37_mrg_smallvar","GRCh37_mrg_SV",
             "GRCh38_v4_smallvar", 
             "GRCh38_mrg_smallvar","GRCh38_mrg_SV"]
BENCHREGIONS = ["GRCh37_v4_smallvar", "GRCh37_v0.6_SV",
             "GRCh37_mrg_smallvar","GRCh37_mrg_SV", "GRCh37_mrg_union",
             "GRCh38_v4_smallvar", 
             "GRCh38_mrg_smallvar","GRCh38_mrg_SV", "GRCh38_mrg_union"]

wildcard_constraints:
    ref="|".join(REFS),
    region="|".join(REGIONS),
    benchset="|".join(BENCHSETS),
    benchtype="|".join(BENCHTYPES),
    strat="|".join(STRATS)

## Define target files for pipeline
rule all:
    input:
        expand(ensembl_dir + "/{ref}_mrg_bench_gene.bed", ref = REFS),
        expand("workflow/data/benchmark_sets/HG002_{ref}_mrg_union.bed", 
                ref = REFS),
        expand("workflow/results/cov_tbls/HG002_{benchregion}_{region}_cov.tsv", 
                region = REGIONS, benchregion = BENCHREGIONS),
        expand("workflow/results/cov_tbls/{strat}_{ref}_mrg_{region}_cov.tsv", 
                strat = STRATS, ref = REFS, region = REGIONS),
        expand("workflow/results/mrg_diff_regions/HG002_{benchregion}_mrg-{region}-diff_cov.tsv", 
                region = REGIONS, benchregion = BENCHREGIONS),
        expand("workflow/results/anno_vcf_tbls/HG002_{benchvar}_anno.tsv",
                benchvar = BENCHVARS),
        expand("workflow/results/cov_tbls/HG002_{ref}_asm-dip_full_gene-plus-flank_cov.tsv",
                ref = REFS)

################################################################################
## Preparing input files
################################################################################

rule prepare_genome:
    input:
        grch37_genome="resources/human.b37.genome",
        grch38_genome="resources/human.hg38.genome"
    output:
        grch37_genome=temp("data/refs/GRCh37.genome"),
        grch38_genome=temp("data/refs/GRCh38.genome")
    shell: """
        ## Copying and renaming reference index files
        cp {input.grch37_genome} {output.grch37_genome}
        cp {input.grch38_genome} {output.grch38_genome}    
    """

rule prepare_mrg_sv_beds:
    input:
        in_file= mrg_dir + "/HG002_{ref}_difficult_medical_gene_SV_benchmark_v1.00.01.bed",
        genome="data/refs/{ref}.genome"
    output:
        temp(benchdir + "/HG002_{ref}_mrg_SV.bed")
    wrapper:
        "0.74.0/bio/bedtools/sort"

rule prepare_mrg_sv:
    input:
        mrg_sv_vcf=mrg_dir + "/HG002_{ref}_difficult_medical_gene_SV_benchmark_v1.00.01.vcf.gz",
        mrg_sv_bed=benchdir + "/HG002_{ref}_mrg_SV.bed"
    output:     
        mrg_sv_vcf=temp(benchdir + "/HG002_{ref}_mrg_SV.vcf.gz")
    conda: "envs/mrgtools.yml"
    shell: """
        ## Filtering for variants in benchmark regions
        bcftools view \
            -O z -o {output.mrg_sv_vcf} \
            -R {input.mrg_sv_bed} \
            {input.mrg_sv_vcf}
    """

rule prepare_mrg_smallvar:
    input:
        mrg_37_smallvar_vcf=mrg_dir + "/HG002_GRCh37_difficult_medical_gene_smallvar_benchmark_v1.00.01.vcf.gz",
        mrg_37_smallvar_bed=mrg_dir + "/HG002_GRCh37_difficult_medical_gene_smallvar_benchmark_v1.00.01.bed",
        mrg_38_smallvar_vcf=mrg_dir + "/HG002_GRCh38_difficult_medical_gene_smallvar_benchmark_v1.00.01.vcf.gz",
        mrg_38_smallvar_bed=mrg_dir + "/HG002_GRCh38_difficult_medical_gene_smallvar_benchmark_v1.00.01.bed"
    output:     
        mrg_37_smallvar_vcf=temp(benchdir + "/HG002_GRCh37_mrg_smallvar.vcf.gz"),
        mrg_37_smallvar_bed=temp(benchdir + "/HG002_GRCh37_mrg_smallvar.bed"),
        mrg_38_smallvar_vcf=temp(benchdir + "/HG002_GRCh38_mrg_smallvar.vcf.gz"),
        mrg_38_smallvar_bed=temp(benchdir + "/HG002_GRCh38_mrg_smallvar.bed")
    shell: """
        ## Copying and renaming small variant vcf and bed files
        cp {input.mrg_37_smallvar_vcf} {output.mrg_37_smallvar_vcf}
        cp {input.mrg_37_smallvar_bed} {output.mrg_37_smallvar_bed}
        cp {input.mrg_38_smallvar_vcf} {output.mrg_38_smallvar_vcf}
        cp {input.mrg_38_smallvar_bed} {output.mrg_38_smallvar_bed}
    """

rule prepare_v4:
    input:
        v4_37_smallvar_vcf = "resources/HG002_GRCh37_1_22_v4.2.1_benchmark.vcf.gz",
        v4_37_smallvar_bed = "resources/HG002_GRCh37_1_22_v4.2.1_benchmark_noinconsistent.bed",
        v4_38_smallvar_vcf = "resources/HG002_GRCh38_1_22_v4.2.1_benchmark.vcf.gz",
        v4_38_smallvar_bed = "resources/HG002_GRCh38_1_22_v4.2.1_benchmark_noinconsistent.bed"
    output:
        v4_37_smallvar_vcf = temp(benchdir + "/HG002_GRCh37_v4_smallvar.vcf.gz"),
        v4_37_smallvar_bed = temp(benchdir + "/HG002_GRCh37_v4_smallvar.bed"),
        v4_38_smallvar_vcf = temp(benchdir + "/HG002_GRCh38_v4_smallvar.vcf.gz"),
        v4_38_smallvar_bed = temp(benchdir + "/HG002_GRCh38_v4_smallvar.bed")
    shell: """
        cp {input.v4_37_smallvar_vcf} {output.v4_37_smallvar_vcf}
        cp {input.v4_37_smallvar_bed} {output.v4_37_smallvar_bed}
        cp {input.v4_38_smallvar_vcf} {output.v4_38_smallvar_vcf}
        cp {input.v4_38_smallvar_bed} {output.v4_38_smallvar_bed}
    """

rule prepare_v06:
    input: 
        vcf = "resources/HG002_Svs_Tier1_v0.6.vcf.gz",
        bed = "resources/HG002_SVs_Tier1_noVDJorXorY_v0.6.2.bed"
    output:
        vcf = temp(benchdir + "/HG002_GRCh37_v0.6_SV.vcf.gz"),
        bed = temp(benchdir + "/HG002_GRCh37_v0.6_SV.bed")
    conda: "envs/mrgtools.yml"
    shell: """
        cp {input.bed} {output.bed}
        
        ## Indexing vcf if not already
        bcftools index -f {input.vcf}
        
        ## Filter VCF for passing variants in benchmark regions
        bcftools view \
            -O z -o {output.vcf} \
            -R {input.bed} \
            --include 'FILTER="PASS"' \
            {input.vcf}
    """

rule sort_gene_list_beds:
    input:
        in_file= "data/gene_coords/unsorted/{ref}_{gene_list}.bed",
        genome="data/refs/{ref}.genome"
    output:
        temp(ensembl_dir + "/{ref}_{gene_list}.bed")
    wrapper:
        "0.74.0/bio/bedtools/sort"

def get_strat_url(wildcards):
    path=strat_tbl.loc[(wildcards.ref, wildcards.strat), "url"]
    return(path)

rule get_strat:
    output: temp("workflow/data/strats/{ref}_{strat}.bed.gz")
    params: url=get_strat_url
    shell: "wget -v -O {output} {params.url}"
        

################################################################################
## Combined SM and SV bed file
################################################################################

rule make_union_bed: 
    input:
        sm = benchdir + "/HG002_{ref}_mrg_smallvar.bed",
        sv = benchdir + "/HG002_{ref}_mrg_SV.bed"
    output: temp(benchdir + "/HG002_{ref}_mrg_union.bed")
    conda: "envs/mrgtools.yml"
    shell: """
        multiintersectbed \
            -i {input.sm} {input.sv} \
            | sortBed -i stdin \
            | mergeBed \
            -i stdin > {output}
    """

################################################################################
## Intron Region Bed 
################################################################################

rule make_intron_bed: 
    input: 
        exon = ensembl_dir + "/{ref}_mrg_full_exon.bed",
        gene = ensembl_dir + "/{ref}_mrg_full_gene.bed"
    output: ensembl_dir + "/{ref}_mrg_full_intron.bed"
    conda: "envs/mrgtools.yml"
    shell: """
        subtractBed \
            -a {input.gene} -b {input.exon} \
            > {output}
    """


################################################################################
## Calculate Included Bases
################################################################################

## Using symbolic links for consistent benchmark region files
rule calc_gene_coverage:
    input:
        a=ensembl_dir + "/{ref}_mrg_full_{region}.bed",
        b=benchdir + "/HG002_{ref}_{benchmarkset}_{benchtype}.bed"
    output: "workflow/results/cov_tbls/HG002_{ref}_{benchmarkset}_{benchtype}_{region}_cov.tsv"
    threads: 2
    wrapper: "0.74.0/bio/bedtools/coveragebed"


rule calc_strat_coverage:
    input:
        a= ensembl_dir + "/{ref}_mrg_full_{region}.bed",
        b= "workflow/data/strats/{ref}_{strat}.bed.gz"
    output: "workflow/results/cov_tbls/{strat}_{ref}_mrg_{region}_cov.tsv"
    threads: 2
    wrapper: "0.74.0/bio/bedtools/coveragebed"

rule benchmark_diff_mrg_bases:
    input: 
        diff_strat = "workflow/data/strats/{ref}_allDiff.bed.gz",
        mrg_genes  = ensembl_dir + "/{ref}_mrg_full_{region}.bed",
        benchmark_region = benchdir + "/HG002_{ref}_{benchmarkset}_{benchtype}.bed"
    output: "workflow/results/mrg_diff_regions/HG002_{ref}_{benchmarkset}_{benchtype}_mrg-{region}-diff_cov.tsv"
    conda: "envs/mrgtools.yml"
    shell: """
        ## Getting overlap of benchmark and difficult regions
        intersectBed \
            -a {input.benchmark_region} -b {input.diff_strat} \
            | coverageBed -a {input.mrg_genes} -b stdin \
            > {output}
    """

rule calc_gene_asm_coverage: 
    input: 
        a=ensembl_dir + "/{ref}_mrg_full_gene-plus-flank.bed",
        b="resources/HG002v11-align2-{ref}.dip.bed"
    output: "workflow/results/cov_tbls/HG002_{ref}_asm-dip_full_gene-plus-flank_cov.tsv"
    threads: 2
    wrapper: "0.74.0/bio/bedtools/coveragebed"
    
############################ Annotating and Converting Benchmark VCFs to Tables

rule make_hdr_file:
    output: temp("hdr.txt")
    shell: """
        echo '##INFO=<ID=GENE,Number=1,Type=String,Description="Gene name">' > {output}
        echo '##INFO=<ID=EXON,Number=1,Type=String,Description="ENSEMBL exon ID">' >> {output}
    """

## Annotating VCFs
rule annotate_vcf:
    input:
        bench_vcf=benchdir + "/HG002_{ref}_{benchmarkset}_{var_type}.vcf.gz",
        mrg_gene_bed=ensembl_dir + "/{ref}_mrg_full_gene.bed",
        mrg_exon_bed=ensembl_dir + "/{ref}_mrg_full_exon.bed",
        hdr="hdr.txt"
    output: "workflow/data/anno_vcf/HG002_{ref}_{benchmarkset}_{var_type}_anno.vcf"
    conda: "envs/mrgtools.yml"
    shell: """
    bcftools annotate \
        -a  {input.mrg_gene_bed} \
        -c CHROM,FROM,TO,INFO/GENE \
        -h {input.hdr} \
        {input.bench_vcf} \
        | bcftools annotate \
            -a {input.mrg_exon_bed} \
            -c CHROM,FROM,TO,-,-,INFO/EXON \
            -h {input.hdr} \
            - \
            > {output}
    """

### Small Var Table
rule make_smallvar_tbl:
    input: 
        anno_vcf="workflow/data/anno_vcf/HG002_{ref}_{benchmarkset}_smallvar_anno.vcf"
    output: "workflow/results/anno_vcf_tbls/HG002_{ref}_{benchmarkset}_smallvar_anno.tsv"
    conda: "envs/mrgtools.yml"
    shell: """
        bcftools query \
            -f '%CHROM\\t%POS\\t[ %GT]\\t%TYPE\\t%INFO/GENE\\t%INFO/EXON\\t%REF\\t%ALT\\n' \
            {input.anno_vcf} \
            > {output}
    """

## Structural Var Table
rule make_sv_tbl:
    input: 
        anno_vcf="workflow/data/anno_vcf/HG002_{ref}_{benchmarkset}_SV_anno.vcf"
    output: "workflow/results/anno_vcf_tbls/HG002_{ref}_{benchmarkset}_SV_anno.tsv"
    conda: "envs/mrgtools.yml"
    shell: """
        bcftools query \
            -f '%CHROM\\t%POS\\t[ %GT]\\t%TYPE\\t%REPTYPE\\t%BREAKSIMLENGTH\\t%INFO/GENE\\t%INFO/EXON\\t%REF\\t%ALT\\n' \
            {input.anno_vcf} \
            > {output}
    """